// server.js
require('dotenv').config();
const express = require('express');
const { Telegraf } = require('telegraf');
const puppeteer = require('puppeteer');
const crypto = require('crypto');
const fs = require('fs');
const app = express();

const bot = new Telegraf(process.env.BOT_TOKEN);
const ADMIN_ID = process.env.ADMIN_ID;

let db, captchaDb, ipDb, fetch;

// FIX: S·ª≠a l·ªói import JSONFile
async function initDB() {
    const { Low } = await import('lowdb');
    const { JSONFile } = await import('lowdb/node');
    fetch = (await import('node-fetch')).default;

    db = new Low(new JSONFile('./history.json'), {});
    captchaDb = new Low(new JSONFile('./captcha.json'), {});
    ipDb = new Low(new JSONFile('./ip.json'), {});

    await db.read();
    db.data ||= { users: {} };

    await captchaDb.read();
    captchaDb.data ||= { captchas: {} };

    await ipDb.read();
    ipDb.data ||= { ips: {} };

    await db.write();
    await captchaDb.write();
    await ipDb.write();
}

let browser = null;
async function getBrowser() {
    if (!browser || !browser.isConnected()) {
        browser = await puppeteer.launch({
            headless: true,
            args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
        });
    }
    return browser;
}

function isAdmin(userId) {
    return userId.toString() === ADMIN_ID;
}

function generateCaptcha() {
    const a = Math.floor(Math.random() * 10) + 1;
    const b = Math.floor(Math.random() * 10) + 1;
    return {
        question: `üîê *CAPTCHA VERIFICATION*\n\nüßÆ Vui l√≤ng gi·∫£i ph√©p t√≠nh sau:\n\`${a} + ${b} = ?\`\n\n‚è∞ _C√≥ hi·ªáu l·ª±c trong 10 ph√∫t_`,
        answer: (a + b).toString()
    };
}

async function canCheckToday(userId) {
    if (isAdmin(userId)) return true;

    await db.read();
    const today = new Date().toISOString().slice(0, 10);
    db.data.users[userId] ||= { checks: {} };
    db.data.users[userId].checks[today] ||= 0;
    await db.write();
    return db.data.users[userId].checks[today] < 10;
}

async function recordCheck(userId) {
    if (isAdmin(userId)) return;

    await db.read();
    const today = new Date().toISOString().slice(0, 10);
    db.data.users[userId] ||= { checks: {} };
    db.data.users[userId].checks[today] ||= 0;
    db.data.users[userId].checks[today]++;
    await db.write();
}

async function remainingChecks(userId) {
    if (isAdmin(userId)) return '‚àû';

    await db.read();
    const today = new Date().toISOString().slice(0, 10);
    if (!db.data.users[userId] || !db.data.users[userId].checks[today]) return 10;
    return 10 - db.data.users[userId].checks[today];
}

async function resetUserChecks(userId) {
    await db.read();
    const today = new Date().toISOString().slice(0, 10);
    if (db.data.users[userId] && db.data.users[userId].checks) {
        db.data.users[userId].checks[today] = 0;
    }
    await db.write();
}

async function canCheckIP(ip) {
    if (ip === 'unknown') return true;
    await ipDb.read();
    const today = new Date().toISOString().slice(0, 10);
    ipDb.data.ips[ip] ||= {};
    ipDb.data.ips[ip][today] ||= 0;
    await ipDb.write();
    return ipDb.data.ips[ip][today] < 20;
}

async function recordCheckIP(ip) {
    if (ip === 'unknown') return;
    await ipDb.read();
    const today = new Date().toISOString().slice(0, 10);
    ipDb.data.ips[ip][today]++;
    await ipDb.write();
}

async function setUserCaptcha(userId) {
    const { question, answer } = generateCaptcha();
    await captchaDb.read();
    captchaDb.data.captchas[userId] = { answer, timestamp: Date.now() };
    await captchaDb.write();
    return question;
}

async function checkUserCaptcha(userId, text) {
    await captchaDb.read();
    const entry = captchaDb.data.captchas[userId];
    if (!entry) return false;
    if (Date.now() - entry.timestamp > 10 * 60 * 1000) {
        delete captchaDb.data.captchas[userId];
        await captchaDb.write();
        return false;
    }
    if (entry.answer === text.trim()) {
        delete captchaDb.data.captchas[userId];
        await captchaDb.write();
        return true;
    }
    return false;
}

async function hasPendingCaptcha(userId) {
    await captchaDb.read();
    return !!captchaDb.data.captchas[userId];
}

function formatBankResult(result, accountNumber) {
    if (!result || result.length === 0) {
        return `‚ùå *KH√îNG T√åM TH·∫§Y TH√îNG TIN*\n\nüî¢ S·ªë t√†i kho·∫£n: \`${accountNumber}\`\n\n_Vui l√≤ng ki·ªÉm tra l·∫°i s·ªë t√†i kho·∫£n_`;
    }

    if (result[0].includes('‚ùå')) {
        return `‚ö†Ô∏è *L·ªñI X·∫¢Y RA*\n\nüî¢ S·ªë t√†i kho·∫£n: \`${accountNumber}\`\n\n${result[0]}\n\n_Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t_`;
    }

    let formatted = `‚úÖ *TH√îNG TIN T√ÄI KHO·∫¢N*\n\n`;
    formatted += `üî¢ *S·ªë t√†i kho·∫£n:* \`${accountNumber}\`\n`;

    if (result[0]) {
        const name = result[0].replace('‚úÖ ', '');
        formatted += `üë§ *Ch·ªß t√†i kho·∫£n:* \`${name}\`\n\n`;
    }

    if (result.length > 1) {
        formatted += `üè¶ *Ng√¢n h√†ng h·ªó tr·ª£:*\n`;
        for (let i = 1; i < result.length; i++) {
            if (result[i].trim()) {
                formatted += `‚Ä¢ ${result[i]}\n`;
            }
        }
    }

    formatted += `\n‚è∞ _Ki·ªÉm tra l√∫c: ${new Date().toLocaleString('vi-VN')}_`;
    return formatted;
}

async function checkBankAccount(accountNumber) {
    const browser = await getBrowser();
    const page = await browser.newPage();
    try {
        console.log(`[${new Date().toISOString()}] Checking account: ${accountNumber}`);

        await page.goto('https://muabanpm.com', {
            waitUntil: 'domcontentloaded',
            timeout: 30000
        });

        await page.waitForSelector('#input-from', { timeout: 15000 });
        await page.type('#input-from', accountNumber, { delay: 80 });
        await page.keyboard.press('Tab');

        await page.waitForFunction(
            () => {
                const el = document.querySelector('#addon-from');
                const text = el?.innerText?.trim();
                return text && text !== 'Loading...' && text.length > 3;
            },
            { timeout: 15000 }
        );

        const result = await page.evaluate(() => {
            const data = [];
            const name = document.querySelector('#addon-from')?.innerText.trim();
            if (!name || name.toLowerCase().includes('loading')) return ['Kh√¥ng t√¨m th·∫•y t√™n t√†i kho·∫£n'];
            data.push('‚úÖ ' + name);
            document.querySelectorAll('#pay-from .pay')?.forEach(el => {
                const text = el.textContent?.trim();
                if (text) data.push(text);
            });
            return data;
        });

        console.log(`[${new Date().toISOString()}] Account check success: ${accountNumber}`);
        await page.close();
        return result;
    } catch (err) {
        console.error(`[${new Date().toISOString()}] Account check error: ${accountNumber}`, err.message);
        await page.close();
        return [`‚ùå L·ªói: ${err.message}`];
    }
}

function getIP(ctx) {
    return ctx?.request?.ip ||
        ctx?.req?.ip ||
        ctx?.req?.connection?.remoteAddress ||
        ctx?.req?.socket?.remoteAddress ||
        (ctx?.req?.headers && ctx.req.headers['x-forwarded-for']) ||
        'unknown';
}

bot.start((ctx) => {
    const isAdminUser = isAdmin(ctx.from.id);
    const welcomeMsg = `üè¶ *BANK ACCOUNT CHECKER*\n\n` +
        `üëã Ch√†o m·ª´ng ${isAdminUser ? '**ADMIN**' : 'b·∫°n'} ƒë·∫øn v·ªõi bot ki·ªÉm tra t√†i kho·∫£n ng√¢n h√†ng!\n\n` +
        `üìù *C√°ch s·ª≠ d·ª•ng:*\n` +
        `‚Ä¢ G·ª≠i s·ªë t√†i kho·∫£n ng√¢n h√†ng (9-14 ch·ªØ s·ªë)\n` +
        `‚Ä¢ Bot s·∫Ω tr·∫£ v·ªÅ t√™n ch·ªß t√†i kho·∫£n v√† ng√¢n h√†ng\n\n` +
        `‚ö° *Gi·ªõi h·∫°n:* ${isAdminUser ? 'Unlimited ‚àû' : '10 l∆∞·ª£t ki·ªÉm tra/ng√†y'}\n\n` +
        `üîß *L·ªánh h·ªó tr·ª£:*\n` +
        `‚Ä¢ /checklimit - Xem s·ªë l∆∞·ª£t c√≤n l·∫°i\n` +
        `‚Ä¢ /help - H∆∞·ªõng d·∫´n chi ti·∫øt\n` +
        (isAdminUser ? `‚Ä¢ /stats - Th·ªëng k√™ h·ªá th·ªëng\n‚Ä¢ /reset - Reset l∆∞·ª£t user\n` : '') +
        `\n_H√£y g·ª≠i s·ªë t√†i kho·∫£n ƒë·ªÉ b·∫Øt ƒë·∫ßu!_`;

    ctx.reply(welcomeMsg, { parse_mode: 'Markdown' });
});

bot.command('help', (ctx) => {
    const isAdminUser = isAdmin(ctx.from.id);
    const helpMsg = `üìñ *H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG*\n\n` +
        `üîç *Ki·ªÉm tra t√†i kho·∫£n:*\n` +
        `‚Ä¢ G·ª≠i s·ªë t√†i kho·∫£n t·ª´ 9-14 ch·ªØ s·ªë\n` +
        `‚Ä¢ V√≠ d·ª•: \`1234567890\`\n\n` +
        `üìä *Gi·ªõi h·∫°n s·ª≠ d·ª•ng:*\n` +
        `‚Ä¢ M·ªói user: ${isAdminUser ? 'Unlimited ‚àû' : '10 l∆∞·ª£t/ng√†y'}\n` +
        `‚Ä¢ M·ªói IP: 20 l∆∞·ª£t/ng√†y\n\n` +
        `üîê *B·∫£o m·∫≠t:*\n` +
        `‚Ä¢ Khi v∆∞·ª£t gi·ªõi h·∫°n, c·∫ßn x√°c th·ª±c Captcha\n` +
        `‚Ä¢ D·ªØ li·ªáu kh√¥ng ƒë∆∞·ª£c l∆∞u tr·ªØ l√¢u d√†i\n\n` +
        `‚ö° *L·ªánh h·ªØu √≠ch:*\n` +
        `‚Ä¢ /checklimit - Xem l∆∞·ª£t c√≤n l·∫°i\n` +
        `‚Ä¢ /start - Kh·ªüi ƒë·ªông l·∫°i bot\n` +
        (isAdminUser ? `\nüîß *L·ªánh Admin:*\n‚Ä¢ /stats - Th·ªëng k√™ h·ªá th·ªëng\n‚Ä¢ /reset - Reset l∆∞·ª£t user\n` : '') +
        `\n‚ùì *C·∫ßn h·ªó tr·ª£?* Li√™n h·ªá admin.`;

    ctx.reply(helpMsg, { parse_mode: 'Markdown' });
});

bot.command('reset', async (ctx) => {
    if (!isAdmin(ctx.from.id)) {
        ctx.reply('üö´ *KH√îNG C√ì QUY·ªÄN*\n\n_Ch·ªâ admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y._', { parse_mode: 'Markdown' });
        return;
    }

    if (ctx.message.reply_to_message) {
        const targetUserId = ctx.message.reply_to_message.from.id.toString();
        await resetUserChecks(targetUserId);

        const resetReplyMsg = `‚úÖ *RESET TH√ÄNH C√îNG*\n\n` +
            `üë§ User: ${ctx.message.reply_to_message.from.first_name}\n` +
            `üÜî ID: \`${targetUserId}\`\n` +
            `üîÑ ƒê√£ kh√¥i ph·ª•c 10 l∆∞·ª£t ki·ªÉm tra\n\n` +
            `_User c√≥ th·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng bot._`;
        ctx.reply(resetReplyMsg, { parse_mode: 'Markdown' });
        return;
    }

    const args = ctx.message.text.split(' ');
    if (args.length < 2) {
        const resetHelpMsg = `üîß *H∆Ø·ªöNG D·∫™N RESET*\n\n` +
            `üìù *C√°ch s·ª≠ d·ª•ng:*\n` +
            `‚Ä¢ Reply tin nh·∫Øn user + \`/reset\`\n` +
            `‚Ä¢ \`/reset 123456789\` - Reset theo User ID\n` +
            `‚Ä¢ \`/reset all\` - Reset t·∫•t c·∫£ user\n\n` +
            `‚ö†Ô∏è _L·ªánh n√†y ch·ªâ reset l∆∞·ª£t ki·ªÉm tra trong ng√†y hi·ªán t·∫°i._`;
        ctx.reply(resetHelpMsg, { parse_mode: 'Markdown' });
        return;
    }

    const target = args[1];

    if (target === 'all') {
        await db.read();
        const today = new Date().toISOString().slice(0, 10);
        let resetCount = 0;

        for (const userId in db.data.users) {
            if (db.data.users[userId].checks && db.data.users[userId].checks[today]) {
                db.data.users[userId].checks[today] = 0;
                resetCount++;
            }
        }

        await db.write();
        const resetAllMsg = `‚úÖ *RESET TH√ÄNH C√îNG*\n\n` +
            `üîÑ ƒê√£ reset l∆∞·ª£t ki·ªÉm tra cho *${resetCount}* user\n` +
            `üìÖ Ng√†y: ${new Date().toLocaleDateString('vi-VN')}\n\n` +
            `_T·∫•t c·∫£ user ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c 10 l∆∞·ª£t ki·ªÉm tra._`;
        ctx.reply(resetAllMsg, { parse_mode: 'Markdown' });

    } else if (/^\d+$/.test(target)) {
        await resetUserChecks(target);
        const resetUserMsg = `‚úÖ *RESET USER TH√ÄNH C√îNG*\n\n` +
            `üë§ User ID: \`${target}\`\n` +
            `üîÑ ƒê√£ kh√¥i ph·ª•c 10 l∆∞·ª£t ki·ªÉm tra\n` +
            `üìÖ Ng√†y: ${new Date().toLocaleDateString('vi-VN')}\n\n` +
            `_User c√≥ th·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng bot._`;
        ctx.reply(resetUserMsg, { parse_mode: 'Markdown' });

    } else {
        ctx.reply('‚ùå *ƒê·ªäNH D·∫†NG SAI*\n\n_Vui l√≤ng s·ª≠ d·ª•ng: /reset 123456789 ho·∫∑c /reset all_', { parse_mode: 'Markdown' });
    }
});

bot.hears(/^[0-9]{9,14}$/, async (ctx) => {
    const userId = ctx.from.id.toString();
    const ip = getIP(ctx);
    const acc = ctx.message.text;

    if (await hasPendingCaptcha(userId)) {
        const pendingMsg = `üö´ *CAPTCHA ƒêANG CH·ªú X√ÅC TH·ª∞C*\n\n` +
            `‚ö†Ô∏è B·∫°n c·∫ßn tr·∫£ l·ªùi Captcha tr∆∞·ªõc khi ti·∫øp t·ª•c ki·ªÉm tra t√†i kho·∫£n.\n\n` +
            `_Vui l√≤ng nh·∫≠p ƒë√°p √°n c·ªßa ph√©p t√≠nh ƒë√£ g·ª≠i tr∆∞·ªõc ƒë√≥._`;
        ctx.reply(pendingMsg, { parse_mode: 'Markdown' });
        return;
    }

    if (!isAdmin(userId)) {
        if (!(await canCheckIP(ip))) {
            const question = await setUserCaptcha(userId);
            const ipLimitMsg = `üö® *GI·ªöI H·∫†N IP*\n\n` +
                `‚õî IP c·ªßa b·∫°n ƒë√£ v∆∞·ª£t qu√° 20 l·∫ßn ki·ªÉm tra trong ng√†y.\n\n` +
                question + `\n\n` +
                `üí° _G·ª≠i ƒë√°p √°n ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng d·ªãch v·ª•._`;
            ctx.reply(ipLimitMsg, { parse_mode: 'Markdown' });
            return;
        }

        if (!(await canCheckToday(userId))) {
            const question = await setUserCaptcha(userId);
            const userLimitMsg = `üìä *H·∫æT L∆Ø·ª¢T KI·ªÇM TRA*\n\n` +
                `‚è∞ B·∫°n ƒë√£ s·ª≠ d·ª•ng h·∫øt 10 l∆∞·ª£t ki·ªÉm tra trong ng√†y.\n\n` +
                question + `\n\n` +
                `üîÑ _L∆∞·ª£t ki·ªÉm tra s·∫Ω ƒë∆∞·ª£c reset v√†o 00:00 h√†ng ng√†y._`;
            ctx.reply(userLimitMsg, { parse_mode: 'Markdown' });
            return;
        }
    }

    ctx.replyWithChatAction('typing');
    const processingMsg = `üîç *ƒêANG KI·ªÇM TRA...*\n\n` +
        `üî¢ S·ªë t√†i kho·∫£n: \`${acc}\`\n\n` +
        `‚è≥ _Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t..._`;
    const processingMessage = await ctx.reply(processingMsg, { parse_mode: 'Markdown' });

    const result = await checkBankAccount(acc);
    const formattedResult = formatBankResult(result, acc);

    try {
        await ctx.deleteMessage(processingMessage.message_id);
    } catch (e) { }

    await ctx.reply(formattedResult, { parse_mode: 'Markdown' });

    await recordCheck(userId);
    if (!isAdmin(userId)) await recordCheckIP(ip);

    const remaining = await remainingChecks(userId);
    const remainingMsg = `üìà *B·∫°n c√≤n ${remaining}${remaining === '‚àû' ? '' : '/10'} l∆∞·ª£t ki·ªÉm tra h√¥m nay*`;
    setTimeout(() => {
        ctx.reply(remainingMsg, { parse_mode: 'Markdown' });
    }, 1000);
});

bot.on('text', async (ctx) => {
    const userId = ctx.from.id.toString();
    if (await hasPendingCaptcha(userId)) {
        const ok = await checkUserCaptcha(userId, ctx.message.text);
        if (ok) {
            const successMsg = `‚úÖ *CAPTCHA TH√ÄNH C√îNG*\n\n` +
                `üéâ X√°c th·ª±c ho√†n t·∫•t! B·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c ki·ªÉm tra t√†i kho·∫£n.\n\n` +
                `_H√£y g·ª≠i s·ªë t√†i kho·∫£n ƒë·ªÉ b·∫Øt ƒë·∫ßu._`;
            ctx.reply(successMsg, { parse_mode: 'Markdown' });
        } else {
            const failMsg = `‚ùå *CAPTCHA TH·∫§T B·∫†I*\n\n` +
                `‚ö†Ô∏è ƒê√°p √°n kh√¥ng ch√≠nh x√°c ho·∫∑c ƒë√£ h·∫øt h·∫°n.\n\n` +
                `üîÑ _G·ª≠i l·∫°i s·ªë t√†i kho·∫£n ƒë·ªÉ nh·∫≠n Captcha m·ªõi._`;
            ctx.reply(failMsg, { parse_mode: 'Markdown' });
        }
    } else {
        const invalidMsg = `‚ùì *L·ªÜNH KH√îNG H·ª¢P L·ªÜ*\n\n` +
            `üìù Vui l√≤ng g·ª≠i s·ªë t√†i kho·∫£n ng√¢n h√†ng (9-14 ch·ªØ s·ªë)\n\n` +
            `üí° _Ho·∫∑c s·ª≠ d·ª•ng /help ƒë·ªÉ xem h∆∞·ªõng d·∫´n._`;
        ctx.reply(invalidMsg, { parse_mode: 'Markdown' });
    }
});

bot.command('checklimit', async (ctx) => {
    const userId = ctx.from.id.toString();
    const left = await remainingChecks(userId);
    const today = new Date().toLocaleDateString('vi-VN');
    const isAdminUser = isAdmin(userId);

    const limitMsg = `üìä *TH·ªêNG K√ä S·ª¨ D·ª§NG*\n\n` +
        `üìÖ Ng√†y: ${today}\n` +
        `üî¢ L∆∞·ª£t c√≤n l·∫°i: *${left}${left === '‚àû' ? '' : '/10'}*\n` +
        `üë§ Quy·ªÅn: ${isAdminUser ? '**ADMIN** (Unlimited)' : 'User'}\n\n` +
        `${left === '‚àû' ? '‚ôæÔ∏è' : left > 5 ? 'üü¢' : left > 2 ? 'üü°' : 'üî¥'} _${left === '‚àû' ? 'Kh√¥ng gi·ªõi h·∫°n' : left > 5 ? 'C√≤n nhi·ªÅu l∆∞·ª£t' : left > 0 ? 'S·∫Øp h·∫øt l∆∞·ª£t' : 'ƒê√£ h·∫øt l∆∞·ª£t'}_\n\n` +
        `üîÑ _Reset v√†o 00:00 h√†ng ng√†y_`;

    ctx.reply(limitMsg, { parse_mode: 'Markdown' });
});

bot.command('stats', async (ctx) => {
    if (!isAdmin(ctx.from.id)) {
        ctx.reply('üö´ *KH√îNG C√ì QUY·ªÄN*\n\n_Ch·ªâ admin m·ªõi c√≥ th·ªÉ xem th·ªëng k√™._', { parse_mode: 'Markdown' });
        return;
    }

    await db.read();
    const users = Object.keys(db.data.users).length;
    let totalChecks = 0;
    let todayChecks = 0;
    const today = new Date().toISOString().slice(0, 10);

    for (const user of Object.values(db.data.users)) {
        for (const [date, count] of Object.entries(user.checks)) {
            totalChecks += count;
            if (date === today) todayChecks += count;
        }
    }

    const statsMsg = `üìà *TH·ªêNG K√ä H·ªÜ TH·ªêNG*\n\n` +
        `üë• T·ªïng s·ªë user: *${users}*\n` +
        `üî¢ T·ªïng l∆∞·ª£t check: *${totalChecks}*\n` +
        `üìÖ H√¥m nay: *${todayChecks}*\n` +
        `üîß Admin: *${ctx.from.first_name}*\n\n` +
        `‚è∞ _C·∫≠p nh·∫≠t: ${new Date().toLocaleString('vi-VN')}_`;

    ctx.reply(statsMsg, { parse_mode: 'Markdown' });
});

async function startBot() {
    await initDB();

    if (process.env.WEBHOOK_URL) {
        bot.telegram.setWebhook(`${process.env.WEBHOOK_URL}/telegram`);
        app.use(bot.webhookCallback('/telegram'));
    } else {
        bot.launch();
    }

    console.log('‚úÖ Bot started successfully!');
}

app.get('/', (req, res) => {
    res.send(`
    <h1>üè¶ Bank Account Checker Bot</h1>
    <p>‚úÖ Bot is running successfully!</p>
    <p>üìä Status: Active</p>
    <p>‚è∞ Last check: ${new Date().toLocaleString('vi-VN')}</p>
  `);
});

app.get('/health', (req, res) => {
    res.json({
        status: 'healthy',
        timestamp: new Date().toISOString(),
        uptime: process.uptime()
    });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`‚úÖ Server is running on port ${PORT}`);
});

process.on('SIGINT', async () => {
    if (browser) await browser.close();
    process.exit();
});

bot.catch((err, ctx) => {
    console.error('Bot error:', err);
    const errorMsg = `‚ö†Ô∏è *L·ªñI H·ªÜ TH·ªêNG*\n\n` +
        `üîß Bot ƒëang g·∫∑p s·ª± c·ªë t·∫°m th·ªùi.\n\n` +
        `_Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t._`;
    ctx.reply(errorMsg, { parse_mode: 'Markdown' }).catch(() => { });
});

startBot();
// Export the app for testing or other purposes
module.exports = app;