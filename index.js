// server.js
require('dotenv').config();
const express = require('express');
const { Telegraf } = require('telegraf');
const puppeteer = require('puppeteer');
const crypto = require('crypto');
const fs = require('fs');
const path = require('path');
const app = express();

const bot = new Telegraf(process.env.BOT_TOKEN);
const ADMIN_ID = process.env.ADMIN_ID;

let db, captchaDb, ipDb, fetch;

// Middleware ƒë·ªÉ parse JSON
app.use(express.json());

// T·∫°o th∆∞ m·ª•c screenshots n·∫øu ch∆∞a c√≥
const screenshotDir = './screenshots';
if (!fs.existsSync(screenshotDir)) {
    fs.mkdirSync(screenshotDir);
}

// FIX: C·∫£i thi·ªán kh·ªüi t·∫°o database v·ªõi error handling
async function initDB() {
    try {
        const { Low } = await import('lowdb');
        const { JSONFile } = await import('lowdb/node');
        fetch = (await import('node-fetch')).default;

        db = new Low(new JSONFile('./history.json'), { users: {} });
        captchaDb = new Low(new JSONFile('./captcha.json'), { captchas: {} });
        ipDb = new Low(new JSONFile('./ip.json'), { ips: {} });

        await db.read();
        await captchaDb.read();
        await ipDb.read();

        db.data = db.data || { users: {} };
        captchaDb.data = captchaDb.data || { captchas: {} };
        ipDb.data = ipDb.data || { ips: {} };

        await db.write();
        await captchaDb.write();
        await ipDb.write();

        console.log('‚úÖ Database initialized successfully');
    } catch (error) {
        console.error('‚ùå Database initialization failed:', error);
        process.exit(1);
    }
}

let browser = null;
let browserRestartCount = 0;

// FIX: C·∫£i thi·ªán getBrowser v·ªõi args t·ªëi ∆∞u ƒë·ªÉ tr√°nh frame detached
async function getBrowser() {
    try {
        if (!browser || !browser.isConnected()) {
            console.log('Creating new browser instance...');

            if (browser) {
                try {
                    await browser.close();
                } catch (e) {
                    console.log('Old browser already closed');
                }
            }

            browser = await puppeteer.launch({
                headless: true,
                args: [
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-gpu',
                    '--no-first-run',
                    '--no-zygote',
                    '--single-process',
                    // FIX: Args quan tr·ªçng ƒë·ªÉ tr√°nh frame detached
                    '--disable-features=site-per-process',
                    '--disable-web-security',
                    '--disable-background-timer-throttling',
                    '--disable-backgrounding-occluded-windows',
                    '--disable-renderer-backgrounding',
                    '--disable-ipc-flooding-protection',
                    '--disable-hang-monitor',
                    '--disable-prompt-on-repost',
                    '--disable-sync',
                    '--force-color-profile=srgb',
                    '--metrics-recording-only',
                    '--disable-default-apps',
                    '--no-default-browser-check',
                    '--autoplay-policy=user-gesture-required',
                    '--disable-background-networking',
                    '--disable-client-side-phishing-detection',
                    '--disable-component-update',
                    '--disable-domain-reliability',
                    '--disable-extensions',
                    '--disable-features=AudioServiceOutOfProcess',
                    '--disable-notifications',
                    '--disable-offer-store-unmasked-wallet-cards',
                    '--disable-popup-blocking',
                    '--disable-print-preview',
                    '--disable-speech-api',
                    '--hide-scrollbars',
                    '--ignore-gpu-blacklist',
                    '--mute-audio',
                    '--no-pings',
                    '--password-store=basic',
                    '--use-gl=swiftshader',
                    '--use-mock-keychain'
                ]
            });

            browserRestartCount++;
            console.log(`Browser created successfully (restart count: ${browserRestartCount})`);
        }
        return browser;
    } catch (error) {
        console.error('Error creating browser:', error);
        browser = null;
        throw error;
    }
}

// FIX: Function ƒë√≥ng page an to√†n
async function safeClosePage(page) {
    try {
        if (page && !page.isClosed()) {
            await page.close();
        }
    } catch (closeError) {
        console.error('Error closing page:', closeError.message);
    }
}

function isAdmin(userId) {
    return userId.toString() === ADMIN_ID;
}

function generateCaptcha() {
    const a = Math.floor(Math.random() * 10) + 1;
    const b = Math.floor(Math.random() * 10) + 1;
    return {
        question: `üîê *CAPTCHA VERIFICATION*\n\nüßÆ Vui l√≤ng gi·∫£i ph√©p t√≠nh sau:\n\`${a} + ${b} = ?\`\n\n‚è∞ _C√≥ hi·ªáu l·ª±c trong 10 ph√∫t_`,
        answer: (a + b).toString()
    };
}

// FIX: Function ch·ª•p m√†n h√¨nh an to√†n
async function captureErrorScreenshot(page, accountNumber, error) {
    try {
        if (!page || page.isClosed()) {
            console.log('Page already closed, cannot capture screenshot');
            return null;
        }

        const browser = page.browser();
        if (!browser || !browser.isConnected()) {
            console.log('Browser disconnected, cannot capture screenshot');
            return null;
        }

        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const filename = `error_${accountNumber}_${timestamp}.png`;
        const filepath = path.join(screenshotDir, filename);

        await page.screenshot({
            path: filepath,
            fullPage: false,
            type: 'png',
            timeout: 10000
        });

        console.log(`üì∏ Screenshot saved: ${filepath}`);
        return filepath;
    } catch (screenshotError) {
        console.error('Failed to capture screenshot:', screenshotError.message);
        return null;
    }
}

// Function g·ª≠i screenshot cho admin
async function sendScreenshotToAdmin(screenshotPath, accountNumber, error) {
    if (!screenshotPath || !fs.existsSync(screenshotPath)) return;

    try {
        const caption = `üö® *L·ªñI KI·ªÇM TRA T√ÄI KHO·∫¢N*\n\n` +
            `üî¢ S·ªë TK: \`${accountNumber}\`\n` +
            `‚ùå L·ªói: ${error}\n` +
            `‚è∞ Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}`;

        await bot.telegram.sendPhoto(ADMIN_ID, {
            source: fs.createReadStream(screenshotPath)
        }, {
            caption: caption,
            parse_mode: 'Markdown'
        });

        console.log(`üì§ Screenshot sent to admin: ${screenshotPath}`);
    } catch (sendError) {
        console.error('Failed to send screenshot to admin:', sendError);
    }
}

async function canCheckToday(userId) {
    if (isAdmin(userId)) return true;

    try {
        await db.read();
        const today = new Date().toISOString().slice(0, 10);

        if (!db.data) db.data = { users: {} };
        if (!db.data.users) db.data.users = {};
        if (!db.data.users[userId]) db.data.users[userId] = { checks: {} };
        if (!db.data.users[userId].checks) db.data.users[userId].checks = {};
        if (!db.data.users[userId].checks[today]) db.data.users[userId].checks[today] = 0;

        await db.write();
        return db.data.users[userId].checks[today] < 10;
    } catch (error) {
        console.error('Error in canCheckToday:', error);
        return false;
    }
}

async function recordCheck(userId) {
    if (isAdmin(userId)) return;

    try {
        await db.read();
        const today = new Date().toISOString().slice(0, 10);

        if (!db.data) db.data = { users: {} };
        if (!db.data.users) db.data.users = {};
        if (!db.data.users[userId]) db.data.users[userId] = { checks: {} };
        if (!db.data.users[userId].checks) db.data.users[userId].checks = {};
        if (!db.data.users[userId].checks[today]) db.data.users[userId].checks[today] = 0;

        db.data.users[userId].checks[today]++;
        await db.write();
    } catch (error) {
        console.error('Error in recordCheck:', error);
    }
}

async function remainingChecks(userId) {
    if (isAdmin(userId)) return '‚àû';

    try {
        await db.read();
        const today = new Date().toISOString().slice(0, 10);

        if (!db.data || !db.data.users || !db.data.users[userId] || !db.data.users[userId].checks || !db.data.users[userId].checks[today]) {
            return 10;
        }

        return 10 - db.data.users[userId].checks[today];
    } catch (error) {
        console.error('Error in remainingChecks:', error);
        return 0;
    }
}

async function resetUserChecks(userId) {
    try {
        await db.read();
        const today = new Date().toISOString().slice(0, 10);

        if (!db.data) db.data = { users: {} };
        if (!db.data.users) db.data.users = {};
        if (!db.data.users[userId]) db.data.users[userId] = { checks: {} };
        if (!db.data.users[userId].checks) db.data.users[userId].checks = {};

        db.data.users[userId].checks[today] = 0;
        await db.write();
    } catch (error) {
        console.error('Error in resetUserChecks:', error);
    }
}

async function canCheckIP(ip) {
    if (ip === 'unknown') return true;

    try {
        await ipDb.read();
        const today = new Date().toISOString().slice(0, 10);

        if (!ipDb.data) ipDb.data = { ips: {} };
        if (!ipDb.data.ips) ipDb.data.ips = {};
        if (!ipDb.data.ips[ip]) ipDb.data.ips[ip] = {};
        if (!ipDb.data.ips[ip][today]) ipDb.data.ips[ip][today] = 0;

        await ipDb.write();
        return ipDb.data.ips[ip][today] < 20;
    } catch (error) {
        console.error('Error in canCheckIP:', error);
        return true;
    }
}

async function recordCheckIP(ip) {
    if (ip === 'unknown') return;

    try {
        await ipDb.read();
        const today = new Date().toISOString().slice(0, 10);

        if (!ipDb.data) ipDb.data = { ips: {} };
        if (!ipDb.data.ips) ipDb.data.ips = {};
        if (!ipDb.data.ips[ip]) ipDb.data.ips[ip] = {};
        if (!ipDb.data.ips[ip][today]) ipDb.data.ips[ip][today] = 0;

        ipDb.data.ips[ip][today]++;
        await ipDb.write();
    } catch (error) {
        console.error('Error in recordCheckIP:', error);
    }
}

async function setUserCaptcha(userId) {
    try {
        const { question, answer } = generateCaptcha();
        await captchaDb.read();

        if (!captchaDb.data) captchaDb.data = { captchas: {} };
        if (!captchaDb.data.captchas) captchaDb.data.captchas = {};

        captchaDb.data.captchas[userId] = { answer, timestamp: Date.now() };
        await captchaDb.write();
        return question;
    } catch (error) {
        console.error('Error in setUserCaptcha:', error);
        return 'L·ªói t·∫°o captcha';
    }
}

async function checkUserCaptcha(userId, text) {
    try {
        await captchaDb.read();

        if (!captchaDb.data || !captchaDb.data.captchas) {
            return false;
        }

        const entry = captchaDb.data.captchas[userId];
        if (!entry) return false;

        if (Date.now() - entry.timestamp > 10 * 60 * 1000) {
            delete captchaDb.data.captchas[userId];
            await captchaDb.write();
            return false;
        }

        if (entry.answer === text.trim()) {
            delete captchaDb.data.captchas[userId];
            await captchaDb.write();
            return true;
        }

        return false;
    } catch (error) {
        console.error('Error in checkUserCaptcha:', error);
        return false;
    }
}

async function hasPendingCaptcha(userId) {
    try {
        await captchaDb.read();

        if (!captchaDb || !captchaDb.data || !captchaDb.data.captchas) {
            return false;
        }

        return !!captchaDb.data.captchas[userId];
    } catch (error) {
        console.error('Error in hasPendingCaptcha:', error);
        return false;
    }
}

function formatBankResult(result, accountNumber) {
    if (!result || result.length === 0) {
        return `‚ùå *KH√îNG T√åM TH·∫§Y TH√îNG TIN*\n\nüî¢ S·ªë t√†i kho·∫£n: \`${accountNumber}\`\n\n_Vui l√≤ng ki·ªÉm tra l·∫°i s·ªë t√†i kho·∫£n_`;
    }

    if (result[0].includes('‚ùå')) {
        return `‚ö†Ô∏è *L·ªñI X·∫¢Y RA*\n\nüî¢ S·ªë t√†i kho·∫£n: \`${accountNumber}\`\n\n${result[0]}\n\n_Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t_`;
    }

    let formatted = `‚úÖ *TH√îNG TIN T√ÄI KHO·∫¢N*\n\n`;
    formatted += `üî¢ *S·ªë t√†i kho·∫£n:* \`${accountNumber}\`\n`;

    if (result[0]) {
        const name = result[0].replace('‚úÖ ', '');
        formatted += `üë§ *Ch·ªß t√†i kho·∫£n:* \`${name}\`\n\n`;
    }

    if (result.length > 1) {
        formatted += `üè¶ *Ng√¢n h√†ng h·ªó tr·ª£:*\n`;
        for (let i = 1; i < result.length; i++) {
            if (result[i].trim()) {
                formatted += `‚Ä¢ ${result[i]}\n`;
            }
        }
    }

    formatted += `\n‚è∞ _Ki·ªÉm tra l√∫c: ${new Date().toLocaleString('vi-VN')}_`;
    return formatted;
}

// FIX: Ho√†n to√†n c·∫£i thi·ªán checkBankAccount ƒë·ªÉ tr√°nh frame detached
async function checkBankAccount(accountNumber) {
    const browser = await getBrowser();
    const page = await browser.newPage();
    let screenshotPath = null;

    try {
        console.log(`[${new Date().toISOString()}] Checking account: ${accountNumber}`);

        // FIX: TƒÉng timeout v√† c·∫£i thi·ªán settings
        await page.setDefaultNavigationTimeout(60000);
        await page.setDefaultTimeout(60000);

        // FIX: Th√™m viewport ƒë·ªÉ tr√°nh layout issues
        await page.setViewport({ width: 1366, height: 768 });

        await page.setExtraHTTPHeaders({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept-Language': 'vi-VN,vi;q=0.9,en;q=0.8',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache'
        });

        await new Promise(resolve => setTimeout(resolve, Math.random() * 5000 + 3000));

        console.log(`[${new Date().toISOString()}] Navigating to muabanpm.com`);

        // FIX: Thay ƒë·ªïi waitUntil ƒë·ªÉ tr√°nh frame detached
        await page.goto('https://muabanpm.com', {
            waitUntil: 'load',
            timeout: 60000
        });

        // FIX: Th√™m delay ƒë·ªÉ ƒë·∫£m b·∫£o page stable
        await new Promise(resolve => setTimeout(resolve, 5000));

        console.log(`[${new Date().toISOString()}] Page loaded, looking for tabs`);

        // FIX: Retry logic cho tab clicking
        let tabClicked = false;
        for (let i = 0; i < 3; i++) {
            try {
                const tabExists = await page.evaluate(() => {
                    const tabs = Array.from(document.querySelectorAll('.tab .item'));
                    const buyTab = tabs.find(tab => tab.innerText.includes('Mua USDT'));
                    return !!buyTab;
                });

                if (!tabExists) {
                    throw new Error('Kh√¥ng t√¨m th·∫•y tab Mua USDT - giao di·ªán c√≥ th·ªÉ ƒë√£ thay ƒë·ªïi');
                }

                await page.evaluate(() => {
                    const tabs = Array.from(document.querySelectorAll('.tab .item'));
                    const buyTab = tabs.find(tab => tab.innerText.includes('Mua USDT'));
                    if (buyTab) {
                        buyTab.click();
                        console.log('Clicked Mua USDT tab');
                    }
                });

                tabClicked = true;
                break;
            } catch (error) {
                console.log(`Tab click attempt ${i + 1} failed:`, error.message);
                if (i < 2) {
                    await new Promise(resolve => setTimeout(resolve, 2000));
                } else {
                    throw error;
                }
            }
        }

        if (!tabClicked) {
            throw new Error('Failed to click tab after 3 attempts');
        }

        console.log(`[${new Date().toISOString()}] Clicked tab, waiting for form`);
        await new Promise(resolve => setTimeout(resolve, 5000));

        // FIX: Retry logic cho input field
        let inputFound = false;
        for (let i = 0; i < 3; i++) {
            try {
                await page.waitForSelector('#input-from', {
                    timeout: 20000,
                    visible: true
                });
                inputFound = true;
                break;
            } catch (error) {
                console.log(`Input field wait attempt ${i + 1} failed:`, error.message);
                if (i < 2) {
                    await new Promise(resolve => setTimeout(resolve, 3000));
                } else {
                    throw error;
                }
            }
        }

        if (!inputFound) {
            throw new Error('Input field not found after 3 attempts');
        }

        console.log(`[${new Date().toISOString()}] Input field found, typing account number`);

        // FIX: C·∫£i thi·ªán input handling
        await page.click('#input-from', { clickCount: 3 });
        await new Promise(resolve => setTimeout(resolve, 500));
        await page.type('#input-from', accountNumber, { delay: 200 + Math.random() * 100 });

        await page.keyboard.press('Tab');
        await page.evaluate(() => {
            const input = document.querySelector('#input-from');
            if (input) {
                input.blur();
                input.dispatchEvent(new Event('change', { bubbles: true }));
                input.dispatchEvent(new Event('input', { bubbles: true }));
            }
        });

        console.log(`[${new Date().toISOString()}] Waiting for account name to load`);
        await new Promise(resolve => setTimeout(resolve, 6000));

        // FIX: C·∫£i thi·ªán waitForFunction v·ªõi retry
        let nameLoaded = false;
        for (let i = 0; i < 3; i++) {
            try {
                await page.waitForFunction(
                    () => {
                        const el = document.querySelector('#addon-from');
                        if (!el) return false;

                        const text = el.innerText?.trim();
                        console.log('Current text:', text);

                        return text &&
                            text !== 'Loading...' &&
                            text !== '' &&
                            text !== '-' &&
                            text.length > 2 &&
                            !text.toLowerCase().includes('loading');
                    },
                    {
                        timeout: 30000,
                        polling: 2000
                    }
                );
                nameLoaded = true;
                break;
            } catch (error) {
                console.log(`Name load wait attempt ${i + 1} failed:`, error.message);
                if (i < 2) {
                    await new Promise(resolve => setTimeout(resolve, 5000));
                } else {
                    console.log('Timeout waiting for name, trying to extract anyway...');
                    nameLoaded = true;
                    break;
                }
            }
        }

        console.log(`[${new Date().toISOString()}] Extracting data`);

        const result = await page.evaluate(() => {
            const data = [];
            const nameEl = document.querySelector('#addon-from');
            const name = nameEl?.innerText?.trim();

            console.log('Extracted name:', name);

            if (!name ||
                name.toLowerCase().includes('loading') ||
                name.toLowerCase().includes('kh√¥ng t√¨m th·∫•y') ||
                name.toLowerCase().includes('not found') ||
                name.toLowerCase().includes('error') ||
                name === '' ||
                name === '-' ||
                name.length < 3) {
                return ['‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n'];
            }

            data.push('‚úÖ ' + name);

            try {
                const bankElements = document.querySelectorAll('#pay-from .pay');
                console.log('Found bank elements:', bankElements.length);

                if (bankElements.length > 0) {
                    bankElements.forEach(el => {
                        const text = el.textContent?.trim();
                        if (text && text !== '' && text !== '-' && text.length > 1) {
                            data.push(text);
                        }
                    });
                }
            } catch (bankError) {
                console.log('Error getting banks:', bankError);
            }

            return data;
        });

        if (!result || result.length === 0) {
            console.log(`[${new Date().toISOString()}] No result returned for: ${accountNumber}`);
            await safeClosePage(page);
            return ['‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n'];
        }

        if (result.length === 1 && result[0].includes('‚ùå')) {
            console.log(`[${new Date().toISOString()}] Account not found: ${accountNumber}`);
            await safeClosePage(page);
            return result;
        }

        console.log(`[${new Date().toISOString()}] Account check success: ${accountNumber}`, result);
        await safeClosePage(page);
        return result;

    } catch (err) {
        console.error(`[${new Date().toISOString()}] Account check error: ${accountNumber}`, err.message);
        console.error('Full error:', err);

        // FIX: Ch·ª•p screenshot tr∆∞·ªõc khi ƒë√≥ng page
        try {
            screenshotPath = await captureErrorScreenshot(page, accountNumber, err);
        } catch (screenshotError) {
            console.error('Screenshot error:', screenshotError.message);
        }

        await safeClosePage(page);

        if (err.message.includes('timeout') || err.message.includes('Waiting failed')) {
            return [`‚ùå Trang web ph·∫£n h·ªìi ch·∫≠m, vui l√≤ng th·ª≠ l·∫°i sau 1-2 ph√∫t.`, screenshotPath];
        }
        if (err.message.includes('Navigation timeout') || err.message.includes('net::ERR_')) {
            return [`‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi website, vui l√≤ng th·ª≠ l·∫°i sau.`, screenshotPath];
        }
        if (err.message.includes('Navigating frame was detached')) {
            return [`‚ùå Trang web b·ªã ng·∫Øt k·∫øt n·ªëi, vui l√≤ng th·ª≠ l·∫°i.`, screenshotPath];
        }
        if (err.message.includes('Kh√¥ng t√¨m th·∫•y tab')) {
            return [`‚ùå Giao di·ªán website ƒë√£ thay ƒë·ªïi, ƒëang c·∫≠p nh·∫≠t bot.`, screenshotPath];
        }

        return [`‚ùå L·ªói h·ªá th·ªëng: ${err.message}`, screenshotPath];
    }
}

function getIP(ctx) {
    return ctx?.request?.ip ||
        ctx?.req?.ip ||
        ctx?.req?.connection?.remoteAddress ||
        ctx?.req?.socket?.remoteAddress ||
        (ctx?.req?.headers && ctx.req.headers['x-forwarded-for']) ||
        'unknown';
}

bot.start((ctx) => {
    const isAdminUser = isAdmin(ctx.from.id);
    const welcomeMsg = `üè¶ *BANK ACCOUNT CHECKER*\n\n` +
        `üëã Ch√†o m·ª´ng ${isAdminUser ? '**ADMIN**' : 'b·∫°n'} ƒë·∫øn v·ªõi bot ki·ªÉm tra t√†i kho·∫£n ng√¢n h√†ng!\n\n` +
        `üìù *C√°ch s·ª≠ d·ª•ng:*\n` +
        `‚Ä¢ G·ª≠i s·ªë t√†i kho·∫£n ng√¢n h√†ng (9-14 ch·ªØ s·ªë)\n` +
        `‚Ä¢ Bot s·∫Ω tr·∫£ v·ªÅ t√™n ch·ªß t√†i kho·∫£n v√† ng√¢n h√†ng\n\n` +
        `‚ö° *Gi·ªõi h·∫°n:* ${isAdminUser ? 'Unlimited ‚àû' : '10 l∆∞·ª£t ki·ªÉm tra/ng√†y'}\n\n` +
        `üîß *L·ªánh h·ªó tr·ª£:*\n` +
        `‚Ä¢ /checklimit - Xem s·ªë l∆∞·ª£t c√≤n l·∫°i\n` +
        `‚Ä¢ /help - H∆∞·ªõng d·∫´n chi ti·∫øt\n` +
        (isAdminUser ? `‚Ä¢ /stats - Th·ªëng k√™ h·ªá th·ªëng\n‚Ä¢ /reset - Reset l∆∞·ª£t user\n‚Ä¢ /screenshots - Xem screenshots l·ªói\n` : '') +
        `\n_H√£y g·ª≠i s·ªë t√†i kho·∫£n ƒë·ªÉ b·∫Øt ƒë·∫ßu!_`;

    ctx.reply(welcomeMsg, { parse_mode: 'Markdown' });
});

bot.command('help', (ctx) => {
    const isAdminUser = isAdmin(ctx.from.id);
    const helpMsg = `üìñ *H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG*\n\n` +
        `üîç *Ki·ªÉm tra t√†i kho·∫£n:*\n` +
        `‚Ä¢ G·ª≠i s·ªë t√†i kho·∫£n t·ª´ 9-14 ch·ªØ s·ªë\n` +
        `‚Ä¢ V√≠ d·ª•: \`1234567890\`\n\n` +
        `üìä *Gi·ªõi h·∫°n s·ª≠ d·ª•ng:*\n` +
        `‚Ä¢ M·ªói user: ${isAdminUser ? 'Unlimited ‚àû' : '10 l∆∞·ª£t/ng√†y'}\n` +
        `‚Ä¢ M·ªói IP: 20 l∆∞·ª£t/ng√†y\n\n` +
        `üîê *B·∫£o m·∫≠t:*\n` +
        `‚Ä¢ Khi v∆∞·ª£t gi·ªõi h·∫°n, c·∫ßn x√°c th·ª±c Captcha\n` +
        `‚Ä¢ D·ªØ li·ªáu kh√¥ng ƒë∆∞·ª£c l∆∞u tr·ªØ l√¢u d√†i\n\n` +
        `‚ö° *L·ªánh h·ªØu √≠ch:*\n` +
        `‚Ä¢ /checklimit - Xem l∆∞·ª£t c√≤n l·∫°i\n` +
        `‚Ä¢ /start - Kh·ªüi ƒë·ªông l·∫°i bot\n` +
        (isAdminUser ? `\nüîß *L·ªánh Admin:*\n‚Ä¢ /stats - Th·ªëng k√™ h·ªá th·ªëng\n‚Ä¢ /reset - Reset l∆∞·ª£t user\n‚Ä¢ /screenshots - Xem screenshots l·ªói\n` : '') +
        `\n‚ùì *C·∫ßn h·ªó tr·ª£?* Li√™n h·ªá admin.`;

    ctx.reply(helpMsg, { parse_mode: 'Markdown' });
});

bot.command('reset', async (ctx) => {
    if (!isAdmin(ctx.from.id)) {
        ctx.reply('üö´ *KH√îNG C√ì QUY·ªÄN*\n\n_Ch·ªâ admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y._', { parse_mode: 'Markdown' });
        return;
    }

    if (ctx.message.reply_to_message) {
        const targetUserId = ctx.message.reply_to_message.from.id.toString();
        await resetUserChecks(targetUserId);

        const resetReplyMsg = `‚úÖ *RESET TH√ÄNH C√îNG*\n\n` +
            `üë§ User: ${ctx.message.reply_to_message.from.first_name}\n` +
            `üÜî ID: \`${targetUserId}\`\n` +
            `üîÑ ƒê√£ kh√¥i ph·ª•c 10 l∆∞·ª£t ki·ªÉm tra\n\n` +
            `_User c√≥ th·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng bot._`;
        ctx.reply(resetReplyMsg, { parse_mode: 'Markdown' });
        return;
    }

    const args = ctx.message.text.split(' ');
    if (args.length < 2) {
        const resetHelpMsg = `üîß *H∆Ø·ªöNG D·∫™N RESET*\n\n` +
            `üìù *C√°ch s·ª≠ d·ª•ng:*\n` +
            `‚Ä¢ Reply tin nh·∫Øn user + \`/reset\`\n` +
            `‚Ä¢ \`/reset 123456789\` - Reset theo User ID\n` +
            `‚Ä¢ \`/reset all\` - Reset t·∫•t c·∫£ user\n\n` +
            `‚ö†Ô∏è _L·ªánh n√†y ch·ªâ reset l∆∞·ª£t ki·ªÉm tra trong ng√†y hi·ªán t·∫°i._`;
        ctx.reply(resetHelpMsg, { parse_mode: 'Markdown' });
        return;
    }

    const target = args[1];

    if (target === 'all') {
        try {
            await db.read();
            const today = new Date().toISOString().slice(0, 10);
            let resetCount = 0;

            if (db.data && db.data.users) {
                for (const userId in db.data.users) {
                    if (db.data.users[userId].checks && db.data.users[userId].checks[today]) {
                        db.data.users[userId].checks[today] = 0;
                        resetCount++;
                    }
                }
            }

            await db.write();
            const resetAllMsg = `‚úÖ *RESET TH√ÄNH C√îNG*\n\n` +
                `üîÑ ƒê√£ reset l∆∞·ª£t ki·ªÉm tra cho *${resetCount}* user\n` +
                `üìÖ Ng√†y: ${new Date().toLocaleDateString('vi-VN')}\n\n` +
                `_T·∫•t c·∫£ user ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c 10 l∆∞·ª£t ki·ªÉm tra._`;
            ctx.reply(resetAllMsg, { parse_mode: 'Markdown' });
        } catch (error) {
            ctx.reply('‚ùå L·ªói khi reset t·∫•t c·∫£ user', { parse_mode: 'Markdown' });
        }

    } else if (/^\d+$/.test(target)) {
        await resetUserChecks(target);
        const resetUserMsg = `‚úÖ *RESET USER TH√ÄNH C√îNG*\n\n` +
            `üë§ User ID: \`${target}\`\n` +
            `üîÑ ƒê√£ kh√¥i ph·ª•c 10 l∆∞·ª£t ki·ªÉm tra\n` +
            `üìÖ Ng√†y: ${new Date().toLocaleDateString('vi-VN')}\n\n` +
            `_User c√≥ th·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng bot._`;
        ctx.reply(resetUserMsg, { parse_mode: 'Markdown' });

    } else {
        ctx.reply('‚ùå *ƒê·ªäNH D·∫†NG SAI*\n\n_Vui l√≤ng s·ª≠ d·ª•ng: /reset 123456789 ho·∫∑c /reset all_', { parse_mode: 'Markdown' });
    }
});

bot.command('screenshots', async (ctx) => {
    if (!isAdmin(ctx.from.id)) {
        ctx.reply('üö´ *KH√îNG C√ì QUY·ªÄN*\n\n_Ch·ªâ admin m·ªõi c√≥ th·ªÉ xem screenshots._', { parse_mode: 'Markdown' });
        return;
    }

    try {
        const files = fs.readdirSync(screenshotDir)
            .filter(file => file.endsWith('.png'))
            .sort((a, b) => fs.statSync(path.join(screenshotDir, b)).mtime - fs.statSync(path.join(screenshotDir, a)).mtime)
            .slice(0, 10);

        if (files.length === 0) {
            ctx.reply('üìÅ *KH√îNG C√ì SCREENSHOTS*\n\n_Ch∆∞a c√≥ screenshot l·ªói n√†o ƒë∆∞·ª£c l∆∞u._', { parse_mode: 'Markdown' });
            return;
        }

        let msg = `üì∏ *SCREENSHOTS G·∫¶N ƒê√ÇY*\n\n`;
        files.forEach((file, index) => {
            const stats = fs.statSync(path.join(screenshotDir, file));
            msg += `${index + 1}. \`${file}\`\nüìÖ ${stats.mtime.toLocaleString('vi-VN')}\n\n`;
        });

        ctx.reply(msg, { parse_mode: 'Markdown' });
    } catch (error) {
        ctx.reply('‚ùå L·ªói khi l·∫•y danh s√°ch screenshots', { parse_mode: 'Markdown' });
    }
});

bot.hears(/^[0-9]{9,14}$/, async (ctx) => {
    const userId = ctx.from.id.toString();
    const ip = getIP(ctx);
    const acc = ctx.message.text;

    if (await hasPendingCaptcha(userId)) {
        const pendingMsg = `üö´ *CAPTCHA ƒêANG CH·ªú X√ÅC TH·ª∞C*\n\n` +
            `‚ö†Ô∏è B·∫°n c·∫ßn tr·∫£ l·ªùi Captcha tr∆∞·ªõc khi ti·∫øp t·ª•c ki·ªÉm tra t√†i kho·∫£n.\n\n` +
            `_Vui l√≤ng nh·∫≠p ƒë√°p √°n c·ªßa ph√©p t√≠nh ƒë√£ g·ª≠i tr∆∞·ªõc ƒë√≥._`;
        ctx.reply(pendingMsg, { parse_mode: 'Markdown' });
        return;
    }

    if (!isAdmin(userId)) {
        if (!(await canCheckIP(ip))) {
            const question = await setUserCaptcha(userId);
            const ipLimitMsg = `üö® *GI·ªöI H·∫†N IP*\n\n` +
                `‚õî IP c·ªßa b·∫°n ƒë√£ v∆∞·ª£t qu√° 20 l·∫ßn ki·ªÉm tra trong ng√†y.\n\n` +
                question + `\n\n` +
                `üí° _G·ª≠i ƒë√°p √°n ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng d·ªãch v·ª•._`;
            ctx.reply(ipLimitMsg, { parse_mode: 'Markdown' });
            return;
        }

        if (!(await canCheckToday(userId))) {
            const question = await setUserCaptcha(userId);
            const userLimitMsg = `üìä *H·∫æT L∆Ø·ª¢T KI·ªÇM TRA*\n\n` +
                `‚è∞ B·∫°n ƒë√£ s·ª≠ d·ª•ng h·∫øt 10 l∆∞·ª£t ki·ªÉm tra trong ng√†y.\n\n` +
                question + `\n\n` +
                `üîÑ _L∆∞·ª£t ki·ªÉm tra s·∫Ω ƒë∆∞·ª£c reset v√†o 00:00 h√†ng ng√†y._`;
            ctx.reply(userLimitMsg, { parse_mode: 'Markdown' });
            return;
        }
    }

    ctx.replyWithChatAction('typing');
    const processingMsg = `üîç *ƒêANG KI·ªÇM TRA...*\n\n` +
        `üî¢ S·ªë t√†i kho·∫£n: \`${acc}\`\n\n` +
        `‚è≥ _Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t (c√≥ th·ªÉ m·∫•t 30-60s)..._`;
    const processingMessage = await ctx.reply(processingMsg, { parse_mode: 'Markdown' });

    const result = await checkBankAccount(acc);

    let screenshotPath = null;
    let cleanResult = result;

    if (result.length > 1 && result[1] && result[1].includes('.png')) {
        screenshotPath = result[1];
        cleanResult = [result[0]];

        if (result[0].includes('‚ùå')) {
            await sendScreenshotToAdmin(screenshotPath, acc, result[0]);
        }
    }

    const formattedResult = formatBankResult(cleanResult, acc);

    try {
        await ctx.deleteMessage(processingMessage.message_id);
    } catch (e) { }

    await ctx.reply(formattedResult, { parse_mode: 'Markdown' });

    await recordCheck(userId);
    if (!isAdmin(userId)) await recordCheckIP(ip);

    const remaining = await remainingChecks(userId);
    const remainingMsg = `üìà *B·∫°n c√≤n ${remaining}${remaining === '‚àû' ? '' : '/10'} l∆∞·ª£t ki·ªÉm tra h√¥m nay*`;
    setTimeout(() => {
        ctx.reply(remainingMsg, { parse_mode: 'Markdown' });
    }, 1000);
});

bot.on('text', async (ctx) => {
    const userId = ctx.from.id.toString();
    if (await hasPendingCaptcha(userId)) {
        const ok = await checkUserCaptcha(userId, ctx.message.text);
        if (ok) {
            const successMsg = `‚úÖ *CAPTCHA TH√ÄNH C√îNG*\n\n` +
                `üéâ X√°c th·ª±c ho√†n t·∫•t! B·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c ki·ªÉm tra t√†i kho·∫£n.\n\n` +
                `_H√£y g·ª≠i s·ªë t√†i kho·∫£n ƒë·ªÉ b·∫Øt ƒë·∫ßu._`;
            ctx.reply(successMsg, { parse_mode: 'Markdown' });
        } else {
            const failMsg = `‚ùå *CAPTCHA TH·∫§T B·∫†I*\n\n` +
                `‚ö†Ô∏è ƒê√°p √°n kh√¥ng ch√≠nh x√°c ho·∫∑c ƒë√£ h·∫øt h·∫°n.\n\n` +
                `üîÑ _G·ª≠i l·∫°i s·ªë t√†i kho·∫£n ƒë·ªÉ nh·∫≠n Captcha m·ªõi._`;
            ctx.reply(failMsg, { parse_mode: 'Markdown' });
        }
    } else {
        const invalidMsg = `‚ùì *L·ªÜNH KH√îNG H·ª¢P L·ªÜ*\n\n` +
            `üìù Vui l√≤ng g·ª≠i s·ªë t√†i kho·∫£n ng√¢n h√†ng (9-14 ch·ªØ s·ªë)\n\n` +
            `üí° _Ho·∫∑c s·ª≠ d·ª•ng /help ƒë·ªÉ xem h∆∞·ªõng d·∫´n._`;
        ctx.reply(invalidMsg, { parse_mode: 'Markdown' });
    }
});

bot.command('checklimit', async (ctx) => {
    const userId = ctx.from.id.toString();
    const left = await remainingChecks(userId);
    const today = new Date().toLocaleDateString('vi-VN');
    const isAdminUser = isAdmin(userId);

    const limitMsg = `üìä *TH·ªêNG K√ä S·ª¨ D·ª§NG*\n\n` +
        `üìÖ Ng√†y: ${today}\n` +
        `üî¢ L∆∞·ª£t c√≤n l·∫°i: *${left}${left === '‚àû' ? '' : '/10'}*\n` +
        `üë§ Quy·ªÅn: ${isAdminUser ? '**ADMIN** (Unlimited)' : 'User'}\n\n` +
        `${left === '‚àû' ? '‚ôæÔ∏è' : left > 5 ? 'üü¢' : left > 2 ? 'üü°' : 'üî¥'} _${left === '‚àû' ? 'Kh√¥ng gi·ªõi h·∫°n' : left > 5 ? 'C√≤n nhi·ªÅu l∆∞·ª£t' : left > 0 ? 'S·∫Øp h·∫øt l∆∞·ª£t' : 'ƒê√£ h·∫øt l∆∞·ª£t'}_\n\n` +
        `üîÑ _Reset v√†o 00:00 h√†ng ng√†y_`;

    ctx.reply(limitMsg, { parse_mode: 'Markdown' });
});

bot.command('stats', async (ctx) => {
    if (!isAdmin(ctx.from.id)) {
        ctx.reply('üö´ *KH√îNG C√ì QUY·ªÄN*\n\n_Ch·ªâ admin m·ªõi c√≥ th·ªÉ xem th·ªëng k√™._', { parse_mode: 'Markdown' });
        return;
    }

    try {
        await db.read();
        const users = db.data && db.data.users ? Object.keys(db.data.users).length : 0;
        let totalChecks = 0;
        let todayChecks = 0;
        const today = new Date().toISOString().slice(0, 10);

        if (db.data && db.data.users) {
            for (const user of Object.values(db.data.users)) {
                if (user.checks) {
                    for (const [date, count] of Object.entries(user.checks)) {
                        totalChecks += count;
                        if (date === today) todayChecks += count;
                    }
                }
            }
        }

        const statsMsg = `üìà *TH·ªêNG K√ä H·ªÜ TH·ªêNG*\n\n` +
            `üë• T·ªïng s·ªë user: *${users}*\n` +
            `üî¢ T·ªïng l∆∞·ª£t check: *${totalChecks}*\n` +
            `üìÖ H√¥m nay: *${todayChecks}*\n` +
            `üîß Admin: *${ctx.from.first_name}*\n\n` +
            `‚è∞ _C·∫≠p nh·∫≠t: ${new Date().toLocaleString('vi-VN')}_`;

        ctx.reply(statsMsg, { parse_mode: 'Markdown' });
    } catch (error) {
        ctx.reply('‚ùå L·ªói khi l·∫•y th·ªëng k√™', { parse_mode: 'Markdown' });
    }
});

async function startBot() {
    await initDB();

    if (process.env.WEBHOOK_URL) {
        bot.telegram.setWebhook(`${process.env.WEBHOOK_URL}/telegram`);
        app.use(bot.webhookCallback('/telegram'));
    } else {
        bot.launch();
    }

    console.log('‚úÖ Bot started successfully!');
}

app.get('/', (req, res) => {
    res.send(`
    <h1>üè¶ Bank Account Checker Bot (Railway)</h1>
    <p>‚úÖ Bot is running successfully!</p>
    <p>üìä Status: Active</p>
    <p>üåê Environment: Production</p>
    <p>‚è∞ Last check: ${new Date().toLocaleString('vi-VN')}</p>
  `);
});

app.get('/health', (req, res) => {
    res.json({
        status: 'healthy',
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        environment: 'production'
    });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`‚úÖ Server is running on port ${PORT}`);
});

process.on('SIGINT', async () => {
    if (browser) await browser.close();
    process.exit();
});

function cleanupOldScreenshots() {
    try {
        const files = fs.readdirSync(screenshotDir);
        const now = Date.now();
        const maxAge = 7 * 24 * 60 * 60 * 1000;

        files.forEach(file => {
            const filepath = path.join(screenshotDir, file);
            const stats = fs.statSync(filepath);

            if (now - stats.mtime.getTime() > maxAge) {
                fs.unlinkSync(filepath);
                console.log(`üóëÔ∏è Deleted old screenshot: ${file}`);
            }
        });
    } catch (error) {
        console.error('Error cleaning up screenshots:', error);
    }
}

setInterval(cleanupOldScreenshots, 24 * 60 * 60 * 1000);

bot.catch((err, ctx) => {
    console.error('Bot error:', err);
    const errorMsg = `‚ö†Ô∏è *L·ªñI H·ªÜ TH·ªêNG*\n\n` +
        `üîß Bot ƒëang g·∫∑p s·ª± c·ªë t·∫°m th·ªùi.\n\n` +
        `_Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t._`;

    try {
        ctx.reply(errorMsg, { parse_mode: 'Markdown' });
    } catch (replyError) {
        console.error('Failed to send error message:', replyError);
    }
});

startBot();

module.exports = app;
